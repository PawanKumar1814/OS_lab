//====> Process Manager Module <=====

alias functionNum R1;
alias currentPID R2;

//free userAreaPage
if(functionNum == 2) then // functionNum is 2 for free user area page
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + 16 * currentPID + 11]; // obtaining the user area page number from currentPID
    multipush(R1, R2, R3);
    R1 = 2;
    R2 = userAreaPage;
    call MOD_2;//invoking release page function in memory manager module
    multipop(R1, R2, R3);
    return ;
endif;


//exit process
if(functionNum == 3) then
    multipush(R1, R2);
    //free page table
    R1 = 4;
    R2 = currentPID;
    call MOD_1;//Invoke the Free Page Table function in module_0

    //free userAreaPage
    R1 = 2;
    R2 = currentPID;
    call MOD_1;//Invoke the Free user Area Page function with the same PID

    multipop(R1, R2);

    [PROCESS_TABLE + (16 * currentPID) + 4] = TERMINATED;
    return ;
endif;

//free page table
if(functionNum == 4) then
    [PTBR + 0] = -1;//Invalidate the page table entries for the library pages by setting page number as -1 and auxiliary data as "0000"
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias i R3;
    alias pageNum R4;

    i = 1;
    while( i < (PTLR -1)) do //For each valid entry in the page table, release the page by invoking the Release Page
        pageNum = [PTBR + 2 + 2 * i];
        if(pageNum != -1) then// for every valid entry
            multipush(R1, R2, R3, R4);
            
            //release page
            R1 = 2;
            R2 = pageNum;
            call MOD_2;

            multipop(R1, R2, R3, R4);
            [PTBR + 2 + 2 * i] = -1;// invalidating the page table entries
            [PTBR + 3 + 2 * i] = "0000";
        endif;
    i = i + 1;
    endwhile;
    return ;

endif;

