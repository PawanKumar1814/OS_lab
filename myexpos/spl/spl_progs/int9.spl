// ====> Exec System call INT 9 <======
breakpoint;
alias processTableEntry R8; 
alias inodeEntry R9;
alias PID R10;
alias userSP R11;
alias fileName R12;
alias ctr R13;
alias virtAddr R14;
alias phyAddr R15;

// Saving the user values for later use
// getting the PID
PID = [SYSTEM_STATUS_TABLE+1];
// getting the process table entry from PID
processTableEntry = PROCESS_TABLE+PID*16; 
userSP = SP;    // storing SP in userSP
[processTableEntry + 13] = SP;   //Assigining  userStack pointer to SP
SP = [processTableEntry + 11]*512 - 1;  //Assigining SP to UserAreaPage Number
[processTableEntry + 9] = 9; // Setting MOD flag as 9 which is exec system call number
virtAddr = userSP - 4; //Getting the virtual address of the file
call AddrTranslation; // Calling the function AddrTranslation written below
fileName = [phyAddr]; // get the physical address of the file

ctr = 0;
while(ctr<MAX_FILE_NUM)do // We re going to check if the memory copy of the inode table for the file
	if([INODE_TABLE+ctr*16+1] == fileName)then // if it is present then break
		break;
	endif;
	ctr = ctr+1;
endwhile;

// if the file is not present or it is not in EXEC format
if( (ctr==MAX_FILE_NUM) || ([INODE_TABLE+ctr*16+0] != EXEC) )then
	virtAddr = userSP - 1;// Assign -1 in the return address
	call AddrTranslation;
	[phyAddr] = -1;
	[processTableEntry + 9] = 0;
	SP = [processTableEntry+ 13];//SP to user stack pointer
	ireturn;
endif;

inodeEntry = ctr;//saving the inode index of the file

multipush(R9,R10,R11,R12,R13,R14,R15);

R1=EXIT_PROCESS;

R2=PID;
// call the exit process present in the process manager module
call PROCESS_MANAGER;
multipop(R9,R10,R11,R12,R13,R14,R15);

//Reclaiming the same page by incrementing the memory free list entry of user area page
[MEMORY_FREE_LIST + [processTableEntry + 11]] = [MEMORY_FREE_LIST + [processTableEntry + 11]] + 1;

// and decrementing mem_free_count in  system status table
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

//Assign the stack pointer to the top of the kernal stack
SP = [processTableEntry + 11]*512 - 1;
//new process uses the PID of the old process
[processTableEntry + 4] = RUNNING;

//library
[PTBR+0]=63;
[PTBR+1]="0100";//read-only
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
multipush(R8,R9,R10,R11,R12,R13,R14,R15);
R1 = GET_FREE_PAGE;// get a free page and allocate to heap
call MEMORY_MANAGER;
[PTBR+4]=R0;
[PTBR+5]="0110";
R1=GET_FREE_PAGE;// same in here
call MEMORY_MANAGER;
[PTBR+6]=R0;
[PTBR+7]="0110";
multipop(R8,R9,R10,R11,R12,R13,R14,R15);


//code
//for the code we need to find out the number of blocks occupied by the file from inode table
ctr = 0;
//INODE_TABLE + 2 contains the file size
while( (ctr<=[INODE_TABLE+ inodeEntry*16 + 2]/PAGE_SIZE) && (ctr<4)) // if it is in between 0 to 2048 or ctr < 4
do
	multipush(R8,R9,R10,R11,R12,R13,R14,R15);
	R1 = GET_FREE_PAGE;// in that blocks we get a free page
	call MEMORY_MANAGER;
	multipop(R8,R9,R10,R11,R12,R13,R14,R15);
	[PTBR+8+2*ctr] = R0;// and allocate in it
	[PTBR+8+2*ctr+1] = "0100";
    breakpoint;
	ctr = ctr+1;
endwhile;

// same for stack done before for heap
multipush(R8,R9,R10,R11,R12,R13,R14,R15);
//stack
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";
multipop(R8,R9,R10,R11,R12,R13,R14,R15);
multipush(R8,R9,R10,R11,R12,R13,R14,R15);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop(R8,R9,R10,R11,R12,R13,R14,R15);


//loading the code from disk to memory
ctr = 0;
while (ctr<=([INODE_TABLE+inodeEntry*16+2]/PAGE_SIZE) && (ctr<4) )do
	R1 = [PTBR + 8 + 2*ctr];
	R2 = [INODE_TABLE + inodeEntry*16 + 8 + ctr];
    breakpoint;
	loadi(R1,R2);
	ctr=ctr+1;
endwhile;
//Store the entry point IP on top of user stack
[[PTBR+16]*512] = [[PTBR+8]*512 + 1];
SP=8*512;
[processTableEntry + 9]=0;// set MOD flag to 0
ireturn;

AddrTranslation:
	R15=virtAddr/512;
	R15=[PTBR+2*R15];
	phyAddr=R15*512+virtAddr%512;
	return;


