
//setting the MODE FLAG for current process as 7 which is read system call
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1 ]*16) +9 ] = 7;

//save the value of the register SP as userSP
alias userSP R0;
userSP=SP;

//Store the value of register SP in the UPTR field 
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 13] = SP;

//Initialize SP (kernel stack pointer) to (user area page number)*512 -1.
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16)+11]*512-1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
alias fileDescriptor R4;

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4)%512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
fileDescriptor = [fileDescPhysicalAddr];

if(fileDescriptor != -1) then  

    //return -1 if the file descriptor value is not equal to -1
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) /512)] * 512) + ((userSP -1 )%512);
    [physicalAddrRetVal] = -1;
else

    alias word R5;

    //retriving the word from the userSP -3
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512 )];

    // push all the registers used till now in this interrupt
    multipush(R0,R1,R2,R3,R4,R5);

    //function number of the terminal read function
    R1 = 4;
    // PID of the current process
    R2 = [SYSTEM_STATUS_TABLE+1];
    // word adress
    R3 = word;

    //calling device module manager
    call MOD_4;

    // restoring all the regiters
    multipop(R0,R1,R2,R3,R4,R5);

    //return 0
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) /512)] * 512) + ((userSP -1 )%512);
    [physicalAddrRetVal] = 0;

endif;
//set the  mode flag in the process table as 0
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+9] = 0;

//change the SP back to userSP
SP = userSP;

//returning to the user mode
ireturn;


