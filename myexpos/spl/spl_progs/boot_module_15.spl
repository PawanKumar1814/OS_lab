//exhandler
loadi(2, 15);
loadi(3, 16);

//timer interrupt
loadi(4, 17);
loadi(5, 18);

//Write interrupt
loadi(16, 29);
loadi(17, 30);

//int 10
loadi(22, 35);
loadi(23, 36);

//Library
loadi(63, 13);
loadi(64, 14);

//init
loadi(65, 7);
loadi(66, 8);

//even
loadi(83, 69);

//module 5
loadi(50, 63);
loadi(51, 64);

//module 0
loadi(40, 53);
loadi(41, 54);

//module 4
loadi(48, 61);
loadi(49, 62);

[TERMINAL_STATUS_TABLE] = 0;

// user programme uses virual addresses for execution
// In page table 
// page/page index = i ==> [PTBR+2*i],[PTBR+(2*i)+1] i = 0,1,2,...,9

// =====================================> SETTING UP VIRTUAL MEMORY SPACE FOR INIT <===============================================

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Satck
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

[76 * 512] = [65 * 512 + 1];

// ===========================================> SETTING UP PROCESS TABLE FOR INIT <=================================================

// pid
[PROCESS_TABLE + 16 + 1] = 1;  
// state
[PROCESS_TABLE + 16 + 4] = CREATED;
// user area page number, physical address
[PROCESS_TABLE + 16 + 11] = 80; 
// kernal stack pointer (KPTR), logical address
[PROCESS_TABLE + 16 + 12] = 0;
// user stack point (UPTR), logical address
[PROCESS_TABLE + 16 + 13] = 8*512;
// PTBR,  physical address
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
// PTLR
[PROCESS_TABLE + 16 + 15 ] = 10;

// =====================================> SETTING UP VIRTUAL MEMORY SPACE FOR EXEC <===============================================
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 86;
[PTBR + 5] = "0110";
[PTBR + 6] = 87;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 83;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Satck
[PTBR + 16] = 84;
[PTBR + 17] = "0110";
[PTBR + 18] = 85;
[PTBR + 19] = "0110";

[84 * 512] = [83 * 512 + 1];

// ===========================================> SETTING UP PROCESS TABLE FOR EXEC <=================================================
// pid
[PROCESS_TABLE + 32 + 1] = 2;
// state
[PROCESS_TABLE + 16 * 2 + 4] = CREATED;
// user area page number, physical address
[PROCESS_TABLE + 32 + 11] = 88;
// kernal stack pointer (KPTR), logical address
[PROCESS_TABLE + 32 + 12 ] = 0;
// user stack point (UPTR), logical address
[PROCESS_TABLE + 32 + 13] = 8 * 512;
[PROCESS_TABLE + 32 + 14] = PTBR;
[PROCESS_TABLE + 32 + 15] = PTLR;

// ===========================================> SETTING UP PROCESS TABLE FOR REAMINING PROCESSES <=================================================
[PROCESS_TABLE + 16 * 3 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 4 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 5 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 6 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 7 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 8 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 9 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 10 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 11 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 12 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 13 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 14 + 4] = TERMINATED;
[PROCESS_TABLE + 16 * 15 + 4] = TERMINATED;

return;
