//=========> RESOURCE MANAGER MODULE <===========
alias functionNum R1;
alias currentPID R2;
alias returnVal R0;



if(functionNum == 8) then//for the acquire terminal
    while([TERMINAL_STATUS_TABLE] == 1) do //The current process should wait in a loop until the terminal is free
        [PROCESS_TABLE + 16 * currentPID + 4] = WAIT_TERMINAL;
        multipush(R0, R1, R2);
        call MOD_5;// calling the scheduler module
        multipop(R0, R1, R2);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;//set the status as 1
    [TERMINAL_STATUS_TABLE + 1] = currentPID;// PID to currentPID
    return;
endif;
if(functionNum == 9) then //for the Release Terminal function
    if(currentPID == [TERMINAL_STATUS_TABLE + 1]) then // currentPID and PID should be same else it is not using terminal 
        [TERMINAL_STATUS_TABLE] = 0;//change the status as 0
        alias i R4;
        i = 0;
        while(i < 16) do 
            alias pid R5;
            pid = [PROCESS_TABLE + 16 * i + 1];

//update the STATE to READY for all processes (with valid PID) which have STATE as WAIT_TERMINAL.

            if([PROCESS_TABLE + 16 * i + 4] == WAIT_TERMINAL)then
                [PROCESS_TABLE + 16 * i + 4] = READY;
            endif;
            i = i + 1;
            endwhile;
        returnVal = 0;
        breakpoint;
        return ;
    else  // if currentPID and pid of terminal status is not same then process is trying to release the terminal without acquiring it
        returnVal = -1;
        return;
    endif;
endif;
