// ==============> SCHEDULER MODULE <===============

// STEP 1 : The scheduler first saves the values of the registers 
// SP, PTBR and PTLR to the process table entry of the current process.

alias currentPID R0;
alias process_table_entry R1;

currentPID = [SYSTEM_STATUS_TABLE +  1];//obtain the pid fo the current process
process_table_entry = PROCESS_TABLE + 16*currentPID; 

multipush (BP);
 
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

// STEP 2 :  Next, it must decide which process to run next.

alias i R2;
alias state R3;
alias newPID R4;

newPID = 0;
i=currentPID+1;
while(i<16) do // iterate through the process table entries from current PID+1 to find a state of ready or created
	state = [PROCESS_TABLE + i*16 + 4];
	if(state == READY || state == CREATED) then
		newPID = [PROCESS_TABLE + i*16 + 1];
		break;
	endif;
	i = i + 1;
endwhile;

// STEP 3 : Having decided on the new process, the scheduler loads new values into 
// SP, PTBR and PTLR registers from the process table entry of the new process.

process_table_entry = PROCESS_TABLE + (newPID * 16);
SP = [process_table_entry + 11]*512 + [process_table_entry + 12];
PTBR = [process_table_entry + 14];
PTLR = [process_table_entry + 15];


// It also updates the system status table to store PID of new process
[SYSTEM_STATUS_TABLE + 1] = newPID;

// If the state of the new process is READY, then the scheduler changes the state to RUNNING.

if(state == CREATED) then
	SP = [process_table_entry + 13];
	[process_table_entry + 4] = RUNNING;
	[process_table_entry + 9] = 0;
	ireturn;
endif;

multipop (BP);
[process_table_entry + 4] = RUNNING;

return;
