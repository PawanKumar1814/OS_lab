//======> Memory Manager Module < =====
alias functionNum R1;

//GET FREE PAGE
if(functionNum == 1)then
	alias PID R11;
	alias processTableEntry R12;
	alias i R13;

	PID = [SYSTEM_STATUS_TABLE+1];//get the PID
	processTableEntry = PROCESS_TABLE+PID*16;//get processtableentry from PID
        //Increase the userRID i.e, wait_mem count
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;
        //while memory is full
	while([SYSTEM_STATUS_TABLE+2] == 0)
	do
		[processTableEntry+4] = WAIT_MEM;//set the state to WAIT_MEM
		call CONTEXT_SWITCH;
	endwhile;
	//decrement the wait memory count
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] - 1;
	//decremet the mem_free_count
	[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

	i = 0;
	//Find a free page using memory free list
	while(i<NUM_MEM_PAGES)
	do
		if([MEMORY_FREE_LIST+i] == 0) //set the corresponding entry as 1.
		then
			[MEMORY_FREE_LIST+i] = 1;
			R0 = i;//store the obtained free page number in R0
			return;
		endif;
	i = i+1;
	endwhile;

	breakpoint;
	R0 = -1;   // This should never happen
	return;

endif;
//Realse page
if(functionNum == 2)then
	alias pageNum R2;
	//decrease the corresponding in mem free list
	[MEMORY_FREE_LIST+pageNum]=[MEMORY_FREE_LIST+pageNum]-1;
    // check for count here !!!
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
	alias i R9;
	i=0;
	while(i<MAX_PROC_NUM)do
		if([PROCESS_TABLE+i*16+4]==WAIT_MEM)then
			[PROCESS_TABLE+i*16+4]=READY;
		endif;
		i=i+1;
	endwhile;
	return;
endif;

